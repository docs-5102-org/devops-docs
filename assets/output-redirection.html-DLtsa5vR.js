import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-aR2NjaSw.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="shell重定向完全指南-理解-2-1-和输出重定向" tabindex="-1"><a class="header-anchor" href="#shell重定向完全指南-理解-2-1-和输出重定向"><span>Shell重定向完全指南：理解 2&gt;&amp;1 和输出重定向</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在Shell脚本中，我们经常看到类似 <code>echo log &gt; /dev/null 2&gt;&amp;1</code> 这样的命令。本文将详细解释Shell重定向的工作原理，特别是 <code>2&gt;&amp;1</code> 的含义和用法。</p><h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><h3 id="文件描述符" tabindex="-1"><a class="header-anchor" href="#文件描述符"><span>文件描述符</span></a></h3><ul><li><strong>0</strong> - 标准输入 (stdin)</li><li><strong>1</strong> - 标准输出 (stdout)</li><li><strong>2</strong> - 标准错误 (stderr)</li></ul><h3 id="重定向符号" tabindex="-1"><a class="header-anchor" href="#重定向符号"><span>重定向符号</span></a></h3><ul><li><strong>&gt;</strong> - 重定向输出（默认为标准输出）</li><li><strong>&amp;</strong> - 表示文件描述符</li><li><strong>/dev/null</strong> - 空设备文件，丢弃所有写入的数据</li></ul><h2 id="核心语法解析" tabindex="-1"><a class="header-anchor" href="#核心语法解析"><span>核心语法解析</span></a></h2><h3 id="_1-dev-null-2-1-详解" tabindex="-1"><a class="header-anchor" href="#_1-dev-null-2-1-详解"><span><code>1 &gt; /dev/null 2&gt;&amp;1</code> 详解</span></a></h3><p>这个命令可以分解为两部分：</p><ol><li><strong><code>1 &gt; /dev/null</code></strong> - 将标准输出重定向到空设备，即不显示任何正常输出</li><li><strong><code>2&gt;&amp;1</code></strong> - 将标准错误重定向到标准输出的目标位置</li></ol><p><strong>完整含义</strong>：将标准输出和标准错误都重定向到 <code>/dev/null</code>，即完全静默执行命令。</p><h2 id="重要区别分析" tabindex="-1"><a class="header-anchor" href="#重要区别分析"><span>重要区别分析</span></a></h2><h3 id="cmd-a-2-a-vs-cmd-a-2-1" tabindex="-1"><a class="header-anchor" href="#cmd-a-2-a-vs-cmd-a-2-1"><span><code>cmd &gt;a 2&gt;a</code> vs <code>cmd &gt;a 2&gt;&amp;1</code></span></a></h3><h4 id="方式一-cmd-a-2-a" tabindex="-1"><a class="header-anchor" href="#方式一-cmd-a-2-a"><span>方式一：<code>cmd &gt;a 2&gt;a</code></span></a></h4><ul><li>标准输出和标准错误都直接写入文件 <code>a</code></li><li>文件 <code>a</code> 被打开<strong>两次</strong></li><li>两个输出流可能相互覆盖，造成数据丢失</li><li>使用两个独立的文件描述符</li></ul><h4 id="方式二-cmd-a-2-1-推荐" tabindex="-1"><a class="header-anchor" href="#方式二-cmd-a-2-1-推荐"><span>方式二：<code>cmd &gt;a 2&gt;&amp;1</code>（推荐）</span></a></h4><ul><li>标准输出直接写入文件 <code>a</code></li><li>标准错误继承标准输出的文件描述符</li><li>文件 <code>a</code> 只被打开<strong>一次</strong></li><li>所有输出通过同一个管道，避免竞争</li><li><strong>IO效率更高</strong></li></ul><h2 id="实际示例" tabindex="-1"><a class="header-anchor" href="#实际示例"><span>实际示例</span></a></h2><h3 id="示例脚本" tabindex="-1"><a class="header-anchor" href="#示例脚本"><span>示例脚本</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># test.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">t</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 不存在的命令，会产生错误</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">date</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 正常命令，输出当前时间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不同重定向的效果" tabindex="-1"><a class="header-anchor" href="#不同重定向的效果"><span>不同重定向的效果</span></a></h3><h4 id="_1-只重定向标准输出" tabindex="-1"><a class="header-anchor" href="#_1-只重定向标准输出"><span>1. 只重定向标准输出</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./test.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test1.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>结果</strong>：</p><ul><li>错误信息显示在终端：<code>./test.sh: line 1: t: command not found</code></li><li>正常输出写入文件：<code>test1.log</code> 包含日期时间</li></ul><h4 id="_2-同时重定向标准输出和错误" tabindex="-1"><a class="header-anchor" href="#_2-同时重定向标准输出和错误"><span>2. 同时重定向标准输出和错误</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./test.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">test2.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>结果</strong>：</p><ul><li>所有输出（包括错误）都写入 <code>test2.log</code></li><li>终端不显示任何信息</li></ul><h2 id="常见应用场景" tabindex="-1"><a class="header-anchor" href="#常见应用场景"><span>常见应用场景</span></a></h2><h3 id="_1-定时任务静默执行" tabindex="-1"><a class="header-anchor" href="#_1-定时任务静默执行"><span>1. 定时任务静默执行</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 在 crontab 中常见</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /tmp/backup.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/dev/null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-后台进程启动" tabindex="-1"><a class="header-anchor" href="#_2-后台进程启动"><span>2. 后台进程启动</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/program</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/dev/null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1 &amp;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-分离错误和正常输出" tabindex="-1"><a class="header-anchor" href="#_3-分离错误和正常输出"><span>3. 分离错误和正常输出</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 正常输出到文件，错误输出到终端</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">output.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 只重定向错误到文件</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">error.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 分别重定向到不同文件</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">output.log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">error.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="顺序的重要性" tabindex="-1"><a class="header-anchor" href="#顺序的重要性"><span>顺序的重要性</span></a></h2><h3 id="正确写法-command-file-2-1" tabindex="-1"><a class="header-anchor" href="#正确写法-command-file-2-1"><span>正确写法：<code>command &gt; file 2&gt;&amp;1</code></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 系统调用顺序：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1. open(file) == 3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. dup2(3,1)  # 标准输出指向文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3. dup2(1,2)  # 标准错误指向标准输出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="错误写法-command-2-1-file" tabindex="-1"><a class="header-anchor" href="#错误写法-command-2-1-file"><span>错误写法：<code>command 2&gt;&amp;1 &gt; file</code></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 系统调用顺序：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1. dup2(1,2)  # 标准错误指向终端（当前标准输出）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. open(file) == 3</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3. dup2(3,1)  # 标准输出指向文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 结果：标准错误仍然输出到终端</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实用技巧" tabindex="-1"><a class="header-anchor" href="#实用技巧"><span>实用技巧</span></a></h2><h3 id="_1-检查命令是否成功" tabindex="-1"><a class="header-anchor" href="#_1-检查命令是否成功"><span>1. 检查命令是否成功</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/dev/null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;命令执行成功&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    echo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;命令执行失败&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-保存输出同时显示" tabindex="-1"><a class="header-anchor" href="#_2-保存输出同时显示"><span>2. 保存输出同时显示</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用 tee 命令</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1 | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tee</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-只捕获错误信息" tabindex="-1"><a class="header-anchor" href="#_3-只捕获错误信息"><span>3. 只捕获错误信息</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">command</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1 &gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/dev/null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li><code>2&gt;&amp;1</code> 是将标准错误重定向到标准输出</li><li>重定向的顺序很重要，<code>&gt; file 2&gt;&amp;1</code> 和 <code>2&gt;&amp;1 &gt; file</code> 效果不同</li><li>使用 <code>&gt; file 2&gt;&amp;1</code> 比 <code>&gt; file 2&gt; file</code> 更高效</li><li><code>/dev/null</code> 是丢弃输出的标准方式</li><li>在脚本和定时任务中合理使用重定向可以提高系统效率和日志管理</li></ul><p>理解这些概念对于编写高效的Shell脚本和系统管理非常重要。</p>`,53)]))}const p=s(l,[["render",t]]),o=JSON.parse(`{"path":"/linux/Shell%E7%BC%96%E7%A8%8B/output-redirection.html","title":"重定向指南","lang":"zh-CN","frontmatter":{"title":"重定向指南","category":["Linux","Shell编程"],"tag":["重定向","标准输出","标准错误","IO操作"],"date":"2022-07-12T00:00:00.000Z","description":"Shell重定向完全指南：理解 2>&1 和输出重定向 概述 在Shell脚本中，我们经常看到类似 echo log > /dev/null 2>&1 这样的命令。本文将详细解释Shell重定向的工作原理，特别是 2>&1 的含义和用法。 基础概念 文件描述符 0 - 标准输入 (stdin) 1 - 标准输出 (stdout) 2 - 标准错误 (s...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重定向指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-09T15:12:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"tuonioooo\\",\\"url\\":\\"/\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/linux/Shell%E7%BC%96%E7%A8%8B/output-redirection.html"}],["meta",{"property":"og:site_name","content":"tuonioooo's DevOps Docs"}],["meta",{"property":"og:title","content":"重定向指南"}],["meta",{"property":"og:description","content":"Shell重定向完全指南：理解 2>&1 和输出重定向 概述 在Shell脚本中，我们经常看到类似 echo log > /dev/null 2>&1 这样的命令。本文将详细解释Shell重定向的工作原理，特别是 2>&1 的含义和用法。 基础概念 文件描述符 0 - 标准输入 (stdin) 1 - 标准输出 (stdout) 2 - 标准错误 (s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T15:12:33.000Z"}],["meta",{"property":"article:tag","content":"IO操作"}],["meta",{"property":"article:tag","content":"标准错误"}],["meta",{"property":"article:tag","content":"标准输出"}],["meta",{"property":"article:tag","content":"重定向"}],["meta",{"property":"article:published_time","content":"2022-07-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T15:12:33.000Z"}]]},"git":{"createdTime":1752073953000,"updatedTime":1752073953000,"contributors":[{"name":"tuonioooo","username":"tuonioooo","email":"daizhaoman@sina.com","commits":1,"url":"https://github.com/tuonioooo"}]},"readingTime":{"minutes":3.09,"words":926},"filePathRelative":"linux/Shell编程/output-redirection.md","excerpt":"\\n<h2>概述</h2>\\n<p>在Shell脚本中，我们经常看到类似 <code>echo log &gt; /dev/null 2&gt;&amp;1</code> 这样的命令。本文将详细解释Shell重定向的工作原理，特别是 <code>2&gt;&amp;1</code> 的含义和用法。</p>\\n<h2>基础概念</h2>\\n<h3>文件描述符</h3>\\n<ul>\\n<li><strong>0</strong> - 标准输入 (stdin)</li>\\n<li><strong>1</strong> - 标准输出 (stdout)</li>\\n<li><strong>2</strong> - 标准错误 (stderr)</li>\\n</ul>","autoDesc":true}`);export{p as comp,o as data};
