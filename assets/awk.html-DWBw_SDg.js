import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as e}from"./app-aR2NjaSw.js";const t={};function l(h,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="awk命令" tabindex="-1"><a class="header-anchor" href="#awk命令"><span>awk命令</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>AWK是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p><p>awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><p>awk的处理文本和数据的方式：它逐行扫描文件，从第一行到最后一行，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。如果没有指定处理动作，则把匹配的行显示到标准输出(屏幕)，如果没有指定模式，则所有被操作所指定的行都被处理。</p><h3 id="版本说明" tabindex="-1"><a class="header-anchor" href="#版本说明"><span>版本说明</span></a></h3><ul><li><strong>AWK</strong>: 原始版本</li><li><strong>NAWK</strong>: New AWK，改进版本</li><li><strong>GAWK</strong>: GNU AWK，GNU版本，提供了Bell实验室和GNU的一些扩展</li></ul><p>awk分别代表其作者姓氏的第一个字母。因为它的作者是三个人，分别是Alfred Aho、Brian Kernighan、Peter Weinberger。在linux系统中已把awk链接到gawk，所以下面全部以awk进行介绍。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{pattern + action}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> filenames</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>尽管操作可能会很复杂，但语法总是这样，其中pattern表示AWK在数据中查找的内容，而action是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。pattern就是要表示的正则表达式，用斜杠括起来。</p><h3 id="调用方式" tabindex="-1"><a class="header-anchor" href="#调用方式"><span>调用方式</span></a></h3><p>awk有三种调用方式：</p><h4 id="_1-命令行方式" tabindex="-1"><a class="header-anchor" href="#_1-命令行方式"><span>1. 命令行方式</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [options] </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;script&#39;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> var</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">value</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> file(s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [-F </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">field-separator]</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;commands&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input-file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-shell脚本方式" tabindex="-1"><a class="header-anchor" href="#_2-shell脚本方式"><span>2. Shell脚本方式</span></a></h4><p>将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/awk</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-脚本文件方式" tabindex="-1"><a class="header-anchor" href="#_3-脚本文件方式"><span>3. 脚本文件方式</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> scriptfile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> var=value</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> awk-script-file</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input-file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命令选项详解" tabindex="-1"><a class="header-anchor" href="#命令选项详解"><span>命令选项详解</span></a></h2><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-F fs</code> 或 <code>--field-separator fs</code></td><td>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:</td></tr><tr><td><code>-v var=value</code> 或 <code>--asign var=value</code></td><td>赋值一个用户定义变量</td></tr><tr><td><code>-f scripfile</code> 或 <code>--file scriptfile</code></td><td>从脚本文件中读取awk命令</td></tr><tr><td><code>-mf nnn</code> 和 <code>-mr nnn</code></td><td>对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目</td></tr><tr><td><code>-W compact</code> 或 <code>--compat</code></td><td>在兼容模式下运行awk</td></tr><tr><td><code>-W copyleft</code> 或 <code>--copyleft</code></td><td>打印简短的版权信息</td></tr><tr><td><code>-W help</code> 或 <code>--help</code></td><td>打印全部awk选项和每个选项的简短说明</td></tr><tr><td><code>-W lint</code> 或 <code>--lint</code></td><td>打印不能向传统unix平台移植的结构的警告</td></tr><tr><td><code>-W posix</code></td><td>打开兼容模式</td></tr><tr><td><code>-W re-interval</code> 或 <code>--re-inerval</code></td><td>允许间隔正则表达式的使用</td></tr><tr><td><code>-W source program-text</code></td><td>使用program-text作为源代码，可与-f命令混用</td></tr><tr><td><code>-W version</code> 或 <code>--version</code></td><td>打印bug报告信息的版本</td></tr></tbody></table><h2 id="内置变量" tabindex="-1"><a class="header-anchor" href="#内置变量"><span>内置变量</span></a></h2><h3 id="基础变量" tabindex="-1"><a class="header-anchor" href="#基础变量"><span>基础变量</span></a></h3><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td><code>$0</code></td><td>完整的输入记录</td></tr><tr><td><code>$1, $2, ..., $n</code></td><td>当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td><code>NF</code></td><td>当前记录中的字段数</td></tr><tr><td><code>NR</code></td><td>当前记录数</td></tr><tr><td><code>FNR</code></td><td>同NR，但相对于当前文件</td></tr><tr><td><code>FS</code></td><td>字段分隔符(默认是任何空格)</td></tr><tr><td><code>OFS</code></td><td>输出字段分隔符(默认值是一个空格)</td></tr><tr><td><code>RS</code></td><td>记录分隔符(默认是一个换行符)</td></tr><tr><td><code>ORS</code></td><td>输出记录分隔符(默认值是一个换行符)</td></tr></tbody></table><h3 id="高级变量" tabindex="-1"><a class="header-anchor" href="#高级变量"><span>高级变量</span></a></h3><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td><code>ARGC</code></td><td>命令行参数的数目</td></tr><tr><td><code>ARGV</code></td><td>包含命令行参数的数组</td></tr><tr><td><code>ARGIND</code></td><td>命令行中当前文件的位置(从0开始算)</td></tr><tr><td><code>CONVFMT</code></td><td>数字转换格式(默认值为%.6g)</td></tr><tr><td><code>ENVIRON</code></td><td>环境变量关联数组</td></tr><tr><td><code>ERRNO</code></td><td>最后一个系统错误的描述</td></tr><tr><td><code>FIELDWIDTHS</code></td><td>字段宽度列表(用空格键分隔)</td></tr><tr><td><code>FILENAME</code></td><td>当前文件名</td></tr><tr><td><code>IGNORECASE</code></td><td>如果为真，则进行忽略大小写的匹配</td></tr><tr><td><code>OFMT</code></td><td>数字的输出格式(默认值是%.6g)</td></tr><tr><td><code>RLENGTH</code></td><td>由match函数所匹配的字符串的长度</td></tr><tr><td><code>RSTART</code></td><td>由match函数所匹配的字符串的第一个位置</td></tr><tr><td><code>SUBSEP</code></td><td>数组下标分隔符(默认值是\\034)</td></tr></tbody></table><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><table><thead><tr><th>运算符类型</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>赋值运算符</td><td><code>= += -= *= /= %= ^= **=</code></td><td>赋值运算符</td></tr><tr><td>条件运算符</td><td><code>?:</code></td><td>C条件表达式</td></tr><tr><td>逻辑运算符</td><td><code>|| &amp;&amp; !</code></td><td>逻辑或、逻辑与、逻辑非</td></tr><tr><td>匹配运算符</td><td><code>~ !~</code></td><td>匹配正则表达式和不匹配正则表达式</td></tr><tr><td>关系运算符</td><td><code>&lt; &lt;= &gt; &gt;= != ==</code></td><td>关系运算符</td></tr><tr><td>算术运算符</td><td><code>+ - * / %</code></td><td>加、减、乘、除与求余</td></tr><tr><td>一元运算符</td><td><code>+ - !</code></td><td>一元加，减和逻辑非</td></tr><tr><td>递增递减</td><td><code>++ --</code></td><td>增加或减少，作为前缀或后缀</td></tr></tbody></table><h2 id="模式和操作" tabindex="-1"><a class="header-anchor" href="#模式和操作"><span>模式和操作</span></a></h2><h3 id="模式类型" tabindex="-1"><a class="header-anchor" href="#模式类型"><span>模式类型</span></a></h3><ol><li><strong>正则表达式</strong>：使用通配符的扩展集</li><li><strong>关系表达式</strong>：可以用关系运算符进行操作，可以是字符串或数字的比较</li><li><strong>模式匹配表达式</strong>：用运算符<sub>(匹配)和!</sub>(不匹配)</li><li><strong>模式范围</strong>：指定一个行的范围，语法不能包括BEGIN和END模式</li><li><strong>BEGIN</strong>：让用户指定在第一条输入记录被处理之前所发生的动作</li><li><strong>END</strong>：让用户在最后一条输入记录被读取之后发生的动作</li></ol><h3 id="操作类型" tabindex="-1"><a class="header-anchor" href="#操作类型"><span>操作类型</span></a></h3><p>操作由一个或多个命令、函数、表达式组成，之间由换行符或分号隔开，并位于大括号内。主要有四部分：</p><ol><li>变量或数组赋值</li><li>输出命令</li><li>内置函数</li><li>控制流命令</li></ol><h2 id="入门实例" tabindex="-1"><a class="header-anchor" href="#入门实例"><span>入门实例</span></a></h2><h3 id="基础用法示例" tabindex="-1"><a class="header-anchor" href="#基础用法示例"><span>基础用法示例</span></a></h3><p>假设<code>last -n 5</code>的输出如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>root     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in</span></span>
<span class="line"><span>root     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)</span></span>
<span class="line"><span>root     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)</span></span>
<span class="line"><span>dmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)</span></span>
<span class="line"><span>root     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示最近登录的5个帐号：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">last</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显示/etc/passwd的账户：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/passwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;:&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显示账户和对应的shell，以tab分割：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/passwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;:&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1&quot;\\t&quot;$7}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>添加表头和表尾：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/passwd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;:&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN {print &quot;name,shell&quot;} {print $1&quot;,&quot;$7} END {print &quot;blue,/bin/nosh&quot;}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="记录和域" tabindex="-1"><a class="header-anchor" href="#记录和域"><span>记录和域</span></a></h2><h3 id="记录" tabindex="-1"><a class="header-anchor" href="#记录"><span>记录</span></a></h3><p>awk把每一个以换行符结束的行称为一个记录。</p><ul><li><strong>记录分隔符</strong>：默认的输入和输出的分隔符都是回车，保存在内建变量ORS和RS中</li><li><strong>$0变量</strong>：它指的是整条记录</li><li><strong>变量NR</strong>：一个计数器，每处理完一条记录，NR的值就增加1</li></ul><h3 id="域" tabindex="-1"><a class="header-anchor" href="#域"><span>域</span></a></h3><p>记录中每个单词称做&quot;域&quot;，默认情况下以空格或tab分隔。awk可跟踪域的个数，并在内建变量NF中保存该值。</p><h3 id="域分隔符" tabindex="-1"><a class="header-anchor" href="#域分隔符"><span>域分隔符</span></a></h3><p>内建变量FS保存输入域分隔符的值，默认是空格或tab。我们可以通过-F命令行选项修改FS的值。</p><p>可以同时使用多个域分隔符：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;[: \\t]&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1,$3}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="print和printf" tabindex="-1"><a class="header-anchor" href="#print和printf"><span>print和printf</span></a></h2><h3 id="print函数" tabindex="-1"><a class="header-anchor" href="#print函数"><span>print函数</span></a></h3><p>print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。</p><h3 id="printf函数" tabindex="-1"><a class="header-anchor" href="#printf函数"><span>printf函数</span></a></h3><p>printf函数，其用法和c语言中printf基本相似，可以格式化字符串，输出复杂时，printf更加好用，代码更易懂。</p><p>示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;:&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{printf(&quot;filename:%10s,linenumber:%s,columns:%s,linecontent:%s\\n&quot;,FILENAME,NR,NF,$0)}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/passwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="awk编程" tabindex="-1"><a class="header-anchor" href="#awk编程"><span>AWK编程</span></a></h2><h3 id="变量和赋值" tabindex="-1"><a class="header-anchor" href="#变量和赋值"><span>变量和赋值</span></a></h3><p>除了awk的内置变量，awk还可以自定义变量。</p><p>统计/etc/passwd的账户人数：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{count++;print $0;} END{print &quot;user count is &quot;, count}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/passwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更完整的版本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN {count=0;print &quot;[start]user count is &quot;, count} {count=count+1;print $0;} END{print &quot;[end]user count is &quot;, count}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/passwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h3><p>awk中的条件语句借鉴于C语言：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expression</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    statement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expression</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    statement1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    statement2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expression</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    statement1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">expression1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    statement2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    statement3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 - 统计文件夹大小，过滤4096大小的文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ls</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN {size=0;print &quot;[start]size is &quot;, size} {if($5!=4096){size=size+$5;}} END{print &quot;[end]size is &quot;, size/1024/1024,&quot;M&quot;}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h3><p>awk支持while、do/while、for、break、continue等循环控制语句：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># while循环</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{ i=1;while(i&lt;NF) {print NF,$i;i++}}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># for循环</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{ for(i=1;i&lt;NF;i++) {print NF,$i}}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h3><p>awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。</p><p>显示/etc/passwd的账户：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;:&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i &lt; NR; i++) print i, name[i]}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/passwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><h3 id="基本正则表达式" tabindex="-1"><a class="header-anchor" href="#基本正则表达式"><span>基本正则表达式</span></a></h3><p>awk支持扩展的正则表达式，可以用于模式匹配。</p><h3 id="gawk专用正则表达式元字符" tabindex="-1"><a class="header-anchor" href="#gawk专用正则表达式元字符"><span>gawk专用正则表达式元字符</span></a></h3><p>以下几个是gawk专用的，不适合unix版本的awk：</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td><code>\\y</code></td><td>匹配一个单词开头或者末尾的空字符串</td></tr><tr><td><code>\\B</code></td><td>匹配单词内的空字符串</td></tr><tr><td><code>\\&lt;</code></td><td>匹配一个单词的开头的空字符串，锚定开始</td></tr><tr><td><code>\\&gt;</code></td><td>匹配一个单词的末尾的空字符串，锚定末尾</td></tr><tr><td><code>\\w</code></td><td>匹配一个字母数字组成的单词</td></tr><tr><td><code>\\W</code></td><td>匹配一个非字母数字组成的单词</td></tr><tr><td><code>\\&#39;</code></td><td>匹配字符串开头的一个空字符串</td></tr><tr><td><code>\\&#39;</code></td><td>匹配字符串末尾的一个空字符串</td></tr></tbody></table><h2 id="实用示例集合" tabindex="-1"><a class="header-anchor" href="#实用示例集合"><span>实用示例集合</span></a></h2><h3 id="基础操作示例" tabindex="-1"><a class="header-anchor" href="#基础操作示例"><span>基础操作示例</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1. 显示包含101的行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/101/&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2. 显示从101到105之间的行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/101/,/105/&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 3. 第一个域等于5的行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;$1 == 5&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 4. 第一个域等于&quot;CT&quot;的行（注意引号）</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;$1 == &quot;CT&quot;&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 5. 第一个域乘以第二个域大于100的行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;$1 * $2 &gt;100 &#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 6. 第二个域大于5且小于等于15的行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;$2 &gt;5 &amp;&amp; $2&lt;=15&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式化输出示例" tabindex="-1"><a class="header-anchor" href="#格式化输出示例"><span>格式化输出示例</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 显示记录号、域数和第一个、最后一个域</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print NR,NF,$1,$NF,}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 显示匹配行的第一、二个域加10</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/101/ {print $1,$2 + 10}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 显示第一、二个域，域间无分隔符</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/101/ {print $1$2}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分隔符操作示例" tabindex="-1"><a class="header-anchor" href="#分隔符操作示例"><span>分隔符操作示例</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用&quot;|&quot;作为分隔符</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;|&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用多个分隔符</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;[ :\\t|]&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用环境变量作为分隔符</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Sep</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;|&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $Sep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 使用方括号作为分隔符</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;[\\[\\]]&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高级应用示例" tabindex="-1"><a class="header-anchor" href="#高级应用示例"><span>高级应用示例</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 取得文件第一个域的最大值</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN { max=100 ;print &quot;max=&quot; max} {max=($1 &gt;max ?$1:max); print $1,&quot;Now max is &quot;max}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 统计包含tom的行数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/tom/ {count++;} END {print &quot;tom was found &quot;count&quot; times&quot;}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 条件统计和输出到文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;gsub(/\\$/,&quot;&quot;);gsub(/,/,&quot;&quot;); cost+=$4; END {print &quot;The total is $&quot; cost&gt;&quot;filename&quot;}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 交互输入</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN {system(&quot;echo \\&quot;Input your name:\\\\c\\&quot;&quot;); getline d;print &quot;\\nYour name is&quot;,d,&quot;\\b!\\n&quot;}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 读取系统文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN {FS=&quot;:&quot;; while(getline&lt; &quot;/etc/passwd&quot; &gt;0) { if($1~&quot;050[0-9]_&quot;) print $1}}&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实用工具示例" tabindex="-1"><a class="header-anchor" href="#实用工具示例"><span>实用工具示例</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 返回目标的第一行</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pgrep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;NR==1&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 返回目标的第一列</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pgrep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $1}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 显示文件全路径</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -F</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{ for(i=1;i&lt;NF;i++) { if(i==NF-1) { printf &quot;%s&quot;,$i } else { printf &quot;%s/&quot;,$i } }}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 日期显示</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;BEGIN { </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">for(j=1;j&lt;=12;j++) { </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    flag=0; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    printf &quot;\\n%d月份\\n&quot;,j; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    for(i=1;i&lt;=31;i++) { </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        if (j==2&amp;&amp;i&gt;28) flag=1; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        if ((j==4||j==6||j==9||j==11)&amp;&amp;i&gt;30) flag=1; </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        if (flag==0) {printf &quot;%02d%02d &quot;,j,i} </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    } </span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">} }&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级特性" tabindex="-1"><a class="header-anchor" href="#高级特性"><span>高级特性</span></a></h2><h3 id="匹配操作符" tabindex="-1"><a class="header-anchor" href="#匹配操作符"><span>匹配操作符(~)</span></a></h3><p>用来在记录或者域内匹配正则表达式：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;$1 ~/^root/&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 显示第一列以root开头的行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="比较表达式" tabindex="-1"><a class="header-anchor" href="#比较表达式"><span>比较表达式</span></a></h3><p>条件表达式语法：<code>condition ? expression1 : expression2</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{max = ($1 &gt; $3) ? $1: $3; print max}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;$1 + $2 &lt; 100&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;$1 &gt; 5 &amp;&amp; $2 &lt; 10&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="范围模板" tabindex="-1"><a class="header-anchor" href="#范围模板"><span>范围模板</span></a></h3><p>范围模板匹配从第一个模板的第一次出现到第二个模板的第一次出现之间所有行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/root/,/mysql/&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 显示从root到mysql之间的所有行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="系统变量调用" tabindex="-1"><a class="header-anchor" href="#系统变量调用"><span>系统变量调用</span></a></h3><p>在awk中调用系统变量必须用单引号：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Flag</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">abcd</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print &#39;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$Flag</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;}&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 结果为abcd</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print &quot;$Flag&quot;}&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 结果为$Flag</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ol><li><strong>合理使用分隔符</strong>：根据数据格式选择合适的分隔符</li><li><strong>善用内置变量</strong>：熟练使用NR、NF、FS等变量简化操作</li><li><strong>模式匹配优化</strong>：使用合适的正则表达式提高匹配效率</li><li><strong>代码可读性</strong>：复杂操作时使用脚本文件而非命令行</li><li><strong>性能考虑</strong>：大文件处理时注意内存使用和处理效率</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>AWK是一个功能强大的文本处理工具，它不仅可以进行简单的文本提取和格式化，还支持复杂的编程逻辑。掌握AWK的基本语法、内置变量、模式匹配和编程特性，可以大大提高文本处理的效率。通过大量的实例练习，可以更好地理解和应用AWK的各种功能。</p><p>更多详细信息请参考：<a href="http://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="noopener noreferrer">GNU AWK用户指南</a></p>`,120)]))}const r=s(t,[["render",l]]),p=JSON.parse(`{"path":"/linux/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/awk.html","title":"awk命令","lang":"zh-CN","frontmatter":{"title":"awk命令","category":["Linux","文本处理"],"tag":["awk","文本处理","数据分析"],"date":"2022-08-01T00:00:00.000Z","description":"awk命令 简介 AWK是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。 awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"awk命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-09T15:12:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"tuonioooo\\",\\"url\\":\\"/\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/linux/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/awk.html"}],["meta",{"property":"og:site_name","content":"tuonioooo's DevOps Docs"}],["meta",{"property":"og:title","content":"awk命令"}],["meta",{"property":"og:description","content":"awk命令 简介 AWK是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。 awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T15:12:33.000Z"}],["meta",{"property":"article:tag","content":"数据分析"}],["meta",{"property":"article:tag","content":"文本处理"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:published_time","content":"2022-08-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T15:12:33.000Z"}]]},"git":{"createdTime":1752073953000,"updatedTime":1752073953000,"contributors":[{"name":"tuonioooo","username":"tuonioooo","email":"daizhaoman@sina.com","commits":1,"url":"https://github.com/tuonioooo"}]},"readingTime":{"minutes":11.15,"words":3344},"filePathRelative":"linux/文本处理/awk.md","excerpt":"\\n<h2>简介</h2>\\n<p>AWK是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</p>\\n<p>awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。</p>\\n<h3>工作原理</h3>\\n<p>awk的处理文本和数据的方式：它逐行扫描文件，从第一行到最后一行，寻找匹配的特定模式的行，并在这些行上进行你想要的操作。如果没有指定处理动作，则把匹配的行显示到标准输出(屏幕)，如果没有指定模式，则所有被操作所指定的行都被处理。</p>","autoDesc":true}`);export{r as comp,p as data};
